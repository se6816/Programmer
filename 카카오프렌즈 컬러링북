class Solution {
    int numberOfArea;
    int maxSizeOfOneArea;
    int size;
    int[][] visited;
    public void fill(int target, int x, int y, int[][] picture){
        if(x<0 || y<0 || x>=picture.length || y>=picture[0].length){
            return;
        }
        if(visited[x][y]==1 || target!=picture[x][y]){
            return;
        }
        visited[x][y]=1;
        size++;
        fill(target,x+1,y,picture);
        fill(target,x-1,y,picture);
        fill(target,x,y-1,picture);
        fill(target,x,y+1,picture);
    }
    public int[] solution(int m, int n, int[][] picture) {
        numberOfArea = 0;
        maxSizeOfOneArea = 0;
        size=0;
        visited = new int[m][n];
        for(int i=0; i<picture.length;i++){
            for(int j=0; j<picture[0].length;j++){
                if(visited[i][j]==0 && picture[i][j]!=0){
                    numberOfArea++;
                    size=0;
                    fill(picture[i][j],i,j,picture);
                    maxSizeOfOneArea=Math.max(maxSizeOfOneArea,size);
                }
            }
        }
        int[] answer = new int[2];
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        return answer;
    }
}
