import java.util.Arrays;
class Solution {
    String[] line;
    public boolean compare(String[] value){
        for(int i=0; i<value.length;i++){
            if(!value[i].equals(line[i])){
                int val=line[i].compareTo(value[i]);
                if(val>0){
                    return true;
                }
                else{
                    return false;
                }
            }
                
        }
        return false;
    }
    public void dfs(String start,String[][] tickets, int[] used,int count,int end,String[] path){
        if(count==0){
            path[0]=start;
        }
        if(count+1==end){
            if(line[0]!=null){
                if(compare(path)){
                    line=Arrays.copyOf(path,path.length);
                }
            }
            else{
                line=Arrays.copyOf(path,path.length);
            }
            return;
        }
        for(int i=0; i<tickets.length;i++){
            if(tickets[i][0].equals(start)){
                if(used[i]==0){
                    int[] used_copy=Arrays.copyOf(used,used.length);
                    String[] path_copy=Arrays.copyOf(path,path.length);
                    used_copy[i]=1;
                    path_copy[count+1]=tickets[i][1];
                    dfs(tickets[i][1],tickets,used_copy,count+1,end,path_copy);
                }
            }
        }
    }
    public String[] solution(String[][] tickets) {
        String[] answer = {};
        int[] used=new int[tickets.length];
        int end=tickets.length+1;
        line= new String[end];
        String[] path=new String[end];
        dfs("ICN",tickets,used,0,end,path);
        
        return line;
    }
}
